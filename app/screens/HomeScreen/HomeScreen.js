/**
* <h1>Home screen</h1>
* Home screen for positive affirmation app
* <p>
*
* @author  Felix Husen
* @version 1.0
* @since   2018-12-8
*
* COPYRIGHT (C) 2018-2019 FFX (FELIX HUSEN).
*
*/

// global constant import
import { Colors, AppStyle } from '../../config/styles.js';
import { parseImage } from '../../components/Main/ImageHandler.js';

// screen style import
import { styles } from './styles';

// 3rd party import
import { Card, Icon, Button, ActionButton } from 'react-native-material-ui';

// import default react native component
import React, { Component } from 'react';
import PushNotification from 'react-native-push-notification';
import {
    StyleSheet,
    Text,
    FlatList,
    View,
    TouchableOpacity,
    StatusBar,
    Platform
} from 'react-native';
import { createStackNavigator, createAppContainer } from 'react-navigation';

// import from the app components
import GCard from '../../components/GridCard/GCard';
import DrawerButton from '../../components/DrawerButton/DrawerButton';
import DatabaseHandler from '../../components/Main/DatabaseHandler';
import DraggableFlatList from 'react-native-draggable-flatlist';
import EmptyState from '../../components/EmptyState/EmptyState';

// database handler variable
var db = new DatabaseHandler();

export default class HomeScreen extends React.Component {
    // default constructor
	  constructor(props) {
        // calling super
        super(props);
        // initialize the state
        this.state = {
            categories: [],
            isFetching: true,
        };
        db.initialize();
        // bind the getdata method
        this.getData = this.getData.bind(this);
        this.onRefresh = this.onRefresh.bind(this);
        this.registerLocalNotification();
    }

    registerLocalNotification = () => {
      db.getAllAffirmations().then(result => {
        let affirmation = result[Math.floor(Math.random() * (result.length))];

        // get the date
        var now = new Date();
        var scheduleNotification;

        if (now.getHours() >= 8 && now.getMinutes() >= 0) {
          scheduleNotification = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 8, 0); 
        } else {
          scheduleNotification = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 8, 0); 
        }

        PushNotification.localNotificationSchedule({
            id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
            color: "red", // (optional) default: system default
            vibrate: false, // (optional) default: true
            title: "Affirmation Brainwaves Meditation", // (optional)
            message: affirmation.text, // (required)
            playSound: false, // (optional) default: true
            soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
            number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
            repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
            date: scheduleNotification  // (Android only) See the doc for notification actions to know more
        });
      });
      
      
    }

    getData() {
        // get the categories from database

        db.getCategories().then((result) => {
            // set the state categories to the result
            this.setState({
              categories: result,
              isFetching: false,
            });
        }).catch((error) => {
            //this callback is executed when your Promise is rejected
            console.log('Get Categories error: ' + error);
        });
    }

    // navigation options
  	static navigationOptions = ({ navigation }) => {
  	    return {
  	      	title: "Affirmation Brainwaves Meditation",
  		  	  headerLeft: <DrawerButton action={() => { navigation.openDrawer()}}/>,
  	    };
  	};

    // it's like viewdidappear
    componentWillMount() {
        this.subs = [
          this.props.navigation.addListener('didFocus', this.componentDidFocus),
        ];
    }

    componentDidFocus = () => {
        this.getData();
    }

    componentWillUnmount() {
      this.subs.forEach(sub => sub.remove());
    }

    onRefresh() {
      this.setState({ isFetching: true }, function() { this.getData() });
    }

    // render card
  	_renderItem = ({ item, index, move, moveEnd, isActive }) => {
        return(
            <GCard
                title={item.title}
                imageURI={parseImage(item.image_path)}
                item={item}
                numColumns="2"
                action={() => this.props.navigation.navigate('Category', {category: item})}
            />
        )
    }

    // key extractor
    _keyExtractor = (item, index) => item.title.toString();

    // fab action
    _manageCategories = () => this.props.navigation.navigate('ManageFolder');

  	render() {
  		return (
  			<View style={styles.container}>
            <StatusBar
              backgroundColor={Colors.app_primary_dark}
              barStyle="light-content"
              animated
            />
            <FlatList
              data={this.state.categories}
              renderItem={this._renderItem}
              keyExtractor={this._keyExtractor}
              numColumns="2"
              contentContainerStyle={{padding:10}}
              onRefresh={() => this.onRefresh()}
              refreshing={this.state.isFetching}
              ListEmptyComponent=<EmptyState text="No Categories"/>
            />
            <ActionButton icon="settings" onPress={this._manageCategories} />
  			</View>
  		)
  	}
}